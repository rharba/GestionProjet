/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package IHM;
import controler.PhaseCtr;
import dao1.AvancementDAO;
import java.sql.SQLException; // Pour gérer les exceptions SQL
import dao1.TacheDAO;
import entiter.Tache;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author selbe
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() throws SQLException {
        initComponents();
        remplirComboBoxPhase();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableTache = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableAvancement = new javax.swing.JTable();
        ModifierTache = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ModifierAvancement = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        comboBoxPhase = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableTache.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID ", "Nom de la tâche", "Description", "Date début", "Date fin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableTache);

        TableAvancement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Temps passé", "Temps restant", "Avancement"
            }
        ));
        jScrollPane2.setViewportView(TableAvancement);

        ModifierTache.setText("Modifier");
        ModifierTache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifierTacheActionPerformed(evt);
            }
        });

        jLabel1.setText("Tableau des tâches du projet ");

        ModifierAvancement.setText("Modifier");
        ModifierAvancement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifierAvancementActionPerformed(evt);
            }
        });

        jLabel2.setText("Tableau des Avancement");

        comboBoxPhase.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxPhaseActionPerformed(evt);
            }
        });

        jLabel3.setText("Indiquer l'avancement du projet");

        jLabel4.setText("Sélectionner une phase : ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ModifierAvancement)
                            .addComponent(ModifierTache)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(comboBoxPhase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(73, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBoxPhase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModifierTache))
                .addGap(7, 7, 7)
                .addComponent(jLabel2)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModifierAvancement))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void remplirTableAvancement(List<List<String>> avancements) {
    DefaultTableModel model = (DefaultTableModel) TableAvancement.getModel();
    // Effacer les lignes existantes de la table
    model.setRowCount(0);
    // Ajouter les nouvelles données à la table
    for (List<String> avancement : avancements) {
        model.addRow(avancement.toArray());
    }
}


private void remplirComboBoxPhase() throws SQLException {
    comboBoxPhase.removeAllItems(); // Videz d'abord la liste des phases
    
    // Appelez la méthode getListeNomsPhases() de votre contrôleur PhaseCtr pour obtenir la liste des noms de phases disponibles
    PhaseCtr phaseCtr = new PhaseCtr();
    List<String> nomsPhases = phaseCtr.getListeNomsPhases(); // Gérez l'exception en affichant un message d'erreur
    if (nomsPhases != null) {
        // Parcourez la liste des noms de phases et ajoutez-les au JComboBox
        for (String nomPhase : nomsPhases) {
            comboBoxPhase.addItem(nomPhase); // Ajoutez le nom de la phase au JComboBox
        }
    }
}
// Méthode pour remplir la table des tâches (TableTache)
private void remplirTableTache(List<Tache> listeTaches) {
    DefaultTableModel model = (DefaultTableModel) TableTache.getModel();
    model.setRowCount(0); // Effacer les données existantes dans la table
    
    for (Tache tache : listeTaches) {
        Object[] rowData = {tache.getId(), tache.getNom(), tache.getDescription(), tache.getDateDebut(), tache.getDateFin()};
        model.addRow(rowData);
    }}
    
    private void ModifierTacheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifierTacheActionPerformed
   int rowIndex = TableTache.getSelectedRow();

    // Vérifiez si une ligne est sélectionnée
    if (rowIndex != -1) {
        // Récupérez les données de la ligne sélectionnée dans TableTache
        int id = Integer.parseInt(TableTache.getValueAt(rowIndex, 0).toString());
        String nomTache = TableTache.getValueAt(rowIndex, 1).toString();
        String description = TableTache.getValueAt(rowIndex, 2).toString();
        String dateDebutStr = TableTache.getValueAt(rowIndex, 3).toString();
        String dateFinStr = TableTache.getValueAt(rowIndex, 4).toString();

        // Convertir les chaînes de caractères en objets Date
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date dateDebut, dateFin;
        try {
            dateDebut = sdf.parse(dateDebutStr);
            dateFin = sdf.parse(dateFinStr);

            // Mettre à jour les valeurs dans votre base de données via la classe TacheDAO
            TacheDAO tacheDAO = new TacheDAO(); // Gérez l'exception de manière appropriée
            
        } catch (ParseException ex) {
            ex.printStackTrace();
        }
    } else {
        // Affichez un message à l'utilisateur pour lui indiquer de sélectionner une ligne avant de modifier
        JOptionPane.showMessageDialog(this, "Veuillez sélectionner une tâche à modifier.");
    }
    }//GEN-LAST:event_ModifierTacheActionPerformed

    private void ModifierAvancementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifierAvancementActionPerformed
     // Obtenez l'index de la ligne sélectionnée dans le tableau TableAvancement
    int rowIndex = TableAvancement.getSelectedRow();
    
    // Vérifiez si une ligne est sélectionnée
    if (rowIndex != -1) {
        // Récupérez les données de la ligne sélectionnée dans TableAvancement
        String tempsPasse = TableAvancement.getValueAt(rowIndex, 0).toString();
        String tempsRestant = TableAvancement.getValueAt(rowIndex, 1).toString();
        String avancement = TableAvancement.getValueAt(rowIndex, 2).toString();
        
        // Mettre à jour les valeurs dans votre modèle de données via la classe AvancementDAO
        AvancementDAO avancementDAO = new AvancementDAO(); // Gérez l'exception de manière appropriée
        try {
            avancementDAO.modifierAvancement(tempsPasse, tempsRestant, avancement);
        } catch (SQLException ex) {
            ex.printStackTrace();
            // Gérer l'exception
            JOptionPane.showMessageDialog(this, "Erreur lors de la modification de l'avancement.");
        }
    } else {
        // Affichez un message à l'utilisateur pour lui indiquer de sélectionner une ligne avant de modifier
        JOptionPane.showMessageDialog(this, "Veuillez sélectionner une ligne d'avancement à modifier.");
    }
    }//GEN-LAST:event_ModifierAvancementActionPerformed

    private void comboBoxPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxPhaseActionPerformed
                                    
    }//GEN-LAST:event_comboBoxPhaseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new NewJFrame().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ModifierAvancement;
    private javax.swing.JButton ModifierTache;
    private javax.swing.JTable TableAvancement;
    private javax.swing.JTable TableTache;
    private javax.swing.JComboBox<String> comboBoxPhase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
